{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"new",
				"newName"
			],
			[
				"my",
				"myName"
			],
			[
				"get",
				"getMyName"
			],
			[
				"Orch",
				"OrchestratorConstants	[Custom Apex Class]"
			],
			[
				"cu",
				"currentJobName"
			],
			[
				"myj",
				"myJobId"
			],
			[
				"s",
				"PUBLIC split(String regex) 	LIST<String>"
			],
			[
				"com",
				"completeJob"
			],
			[
				"job",
				"jobSetting"
			],
			[
				"SOb",
				"SObject	[Standard Apex Class]"
			],
			[
				"OrchestratorB",
				"OrchestratorBatchParent	[Custom Apex Class]"
			],
			[
				"Orches",
				"OrchestratorQueueable	[Custom Apex Class]"
			],
			[
				"myc",
				"myConfigMDT"
			],
			[
				"n",
				"myName"
			],
			[
				"set",
				"setupClass"
			],
			[
				"Orche",
				"OrchestratorTaskSetup"
			],
			[
				"con",
				"configurationId"
			],
			[
				"DEBU",
				"DEBUGPREFIX"
			],
			[
				"med",
				"metadataType"
			],
			[
				"de",
				"debug(Anydatatype_msg)"
			],
			[
				"a",
				"abbreviate"
			],
			[
				"log",
				"logString"
			],
			[
				"Log",
				"LoggingLevel	[Standard Apex Class]"
			],
			[
				"sta",
				"startTime"
			],
			[
				"Date",
				"Datetime	[Standard Apex Class]"
			],
			[
				"cre",
				"createNewRun"
			],
			[
				"Met",
				"Metadata_Audit_Job_Log__c	[Sobject Name]"
			],
			[
				"Meta",
				"Metadata_Audit_Job_Log__c	[Sobject Name]"
			],
			[
				"Metadata",
				"MetadataAuditLogQueueable	[Custom Apex Class]"
			],
			[
				"jo",
				"jobLogId"
			],
			[
				"MetadataAu",
				"MetadataAuditLogQueueable	[Custom Apex Class]"
			],
			[
				"debu",
				"debug(Enum_loglevel, Anydatatype_msg)"
			],
			[
				"e",
				"PUBLIC ERROR"
			],
			[
				"run",
				"runNext"
			],
			[
				"las",
				"lastRunMdType"
			],
			[
				"i",
				"Items_modified__c 	Number"
			],
			[
				"ENTR",
				"ENTRYTYPE_MOD"
			],
			[
				"it",
				"Items_added__c 	Number"
			],
			[
				"EN",
				"ENTRYTYPE_CREATE"
			],
			[
				"item",
				"Items_deleted__c 	Number"
			],
			[
				"regis",
				"registerNew"
			],
			[
				"Metadata_",
				"Metadata_Audit_Run_Log__c	[Sobject Name]"
			],
			[
				"exis",
				"existingMali"
			],
			[
				"ENTRY",
				"ENTRYTYPE_DELETE"
			],
			[
				"incom",
				"incomingMalis"
			],
			[
				"ENTRYTYPE_",
				"ENTRYTYPE_MOD"
			],
			[
				"me",
				"Metadata_Item_ID__c 	Text"
			],
			[
				"existin",
				"existingItemsMap"
			],
			[
				"fp",
				"fpList"
			],
			[
				"Me",
				"MetadataAuditLogItemsSelector	[Custom Apex Class]"
			],
			[
				"Lo",
				"LoggingLevel	[Standard Apex Class]"
			],
			[
				"metadat",
				"metadataTypeName"
			],
			[
				"t",
				"type_x"
			],
			[
				"o",
				"oType"
			],
			[
				"So",
				"SObjectType"
			],
			[
				"pem",
				"Permit_delete__c"
			],
			[
				"as",
				"assertEquals()"
			],
			[
				"look",
				"PUBLIC lookupRecordTypeIdByObjectAndRTDevName(String objectName, String RTDevName) 	Id"
			],
			[
				"DA_Te",
				"DA_TestDataFactory	[Custom Apex Class]"
			],
			[
				"geto",
				"PUBLIC getOpportunityAndInsert(User owner, Id recTypeId) 	Opportunity"
			],
			[
				"rectyp",
				"recTypeId"
			],
			[
				"rec",
				"recordTypesFromCustomSettings"
			],
			[
				"getu",
				"PUBLIC getUserId() 	String"
			],
			[
				"may",
				"mayDelete"
			],
			[
				"opps",
				"oppsMap"
			],
			[
				"O",
				"Opportunity"
			],
			[
				"loo",
				"PUBLIC lookupRecordTypeIdByObjectAndRTDevName(String objectName, String RTDevName) 	Id"
			],
			[
				"Opp",
				"OpportunityDeleteHandler"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/classes/OrchestratorQueueable.cls",
			"settings":
			{
				"buffer_size": 4918,
				"line_ending": "Unix"
			}
		},
		{
			"file": "apex-scripts/RunOrchestrator.cls",
			"settings":
			{
				"buffer_size": 72,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/classes/OrchestratorConstants.cls",
			"settings":
			{
				"buffer_size": 240,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/* \n * \n * This is the OrchestratorJobParent class which all jobs must inherit from \n * It implements the core functionalities, and leaves the execute method for\n * the child classes to implement\n * \n *\n*/\n\nglobal abstract without sharing class OrchestratorJobParent {\n	protected String myJobId;  // contains the unique job ID\n	protected String myConfigId; // contains the pointer (name) of the Custom Metadata Item running this job\n	protected Orchestrator_Execution_Settings__c mySettings; // holds the custom settings object for this execution\n	protected String myName; // you should populate this field with the name of your job\n	protected String DEBUGPREFIX = ' ** ORCH_JOBPARENT ** '; // you should override this String to label your log entries\n	public Enum JobType {BATCH, QUEUEABLE}\n	public JobType myJobType;\n\n	public void setupParameters (String jobId, String configId, Orchestrator_Execution_Settings__c settings) {\n		myJobId = jobId;\n		myConfigId = configId;\n		mySettings = settings;\n		init();\n	}\n\n	public void log(String message) {\n		log(LoggingLevel.DEBUG, message);\n	}\n\n	public void log (LoggingLevel lvl, String message) {\n		System.debug(lvl, DEBUGPREFIX + message);\n	}\n\n	global boolean startJob() {\n\n		if (myJobId == null || myConfigId == null || myName == null || \n			(mySettings == null && myName != OrchestratorConstants.TASKSETUP_JOBNAME)\n		) {\n			// cannot start job without core params (unless it's the task setup which creates the custom settings), error out\n			String msg = DEBUGPREFIX + 'Job: ' + myName + ' instatiation failed. Minimum parameters not supplied: Job ID: ' \n				+ myJobId + ' Config ID: ' + myConfigId;\n			log(LoggingLevel.ERROR, msg);\n			throw new OrchestratorException(msg);\n		} else {\n			// minimum parameters there, start job\n			return startMyJobType();\n		}\n	}\n\n	global OrchestratorJobParent() {}\n\n	global abstract boolean startMyJobType();\n	global abstract void init();\n}",
			"file": "src/classes/OrchestratorJobParent.cls",
			"file_size": 1917,
			"file_write_time": 131097473670000000,
			"settings":
			{
				"buffer_size": 1917,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/* \n * \n * This is the OrchestratorQueueableParent class which all jobs must inherit from \n * It implements the core functionalities, and leaves the execute method for\n * the child classes to implement\n * \n *\n*/\n\nglobal abstract without sharing class OrchestratorQueueableParent extends OrchestratorJobParen\n\n	global OrchestratorQueueableParent() {\n		DEBUGPREFIX = ' ** ORCH_QPARENT ** ';\n		myJobType = JobType.QUEUEABLE;\n		init(); \n	}\n\n	// return value defines whether the job completed or not\n\n	global override boolean startMyJobType() {\n		// minimum parameters there, start job\n		return execute();\n	}\n\n	// execute method which must be overridden in subclass\n	// return parameter indicates whether the execute method has completed all of its task (true)\n	// or will need another pass (false)\n\n	global abstract boolean execute();\n\n	global override virtual void init() {}\n\n}",
			"file": "src/classes/OrchestratorQueueableParent.cls",
			"file_size": 877,
			"file_write_time": 131097459130000000,
			"settings":
			{
				"buffer_size": 874,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "global abstract class OrchestratorBatchParent extends OrchestratorJobParent implements Database.Batchable<sObject>, Database.Stateful {\n	\n	protected String query;\n	public OrchestratorQueueable myQueueManager;\n\n	public OrchestratorBatchParent() {\n		myJobType = JobType.BATCH;\n		DEBUGPREFIX = ' ** ORCH_BATCHPARENT ** ';\n	}\n\n	global override boolean startMyJobType() {\n		//check if we have the queue manager populated so that we can reschedule the next execution, if so, fire batch\n		if (myQueueManager == null) {\n			String msg = 'Job: ' + myName + ' instatiation failed. myQueueManager not populated.';\n			log(LoggingLevel.ERROR, msg);\n			throw new OrchestratorException(msg);\n		} else {\n\n			Database.executeBatch(this);\n\n			// return value doesn't matter, as Orchestrator will check if this was a batch and ignore\n			// we will call completejob from the batch's finish method\n\n			return false;\n		}\n		\n	}\n	\n	global Database.QueryLocator start(Database.BatchableContext BC) {\n		return Database.getQueryLocator(query);\n	}\n	\n	global void finish(Database.BatchableContext BC) {\n		myQueueManager.callCompleteJob();\n	}\n\n	global abstract void execute(Database.BatchableContext BC, List<sObject> scope);\n	\n\n\n}",
			"file": "src/classes/OrchestratorBatchParent.cls",
			"file_size": 1200,
			"file_write_time": 131097477260000000,
			"settings":
			{
				"buffer_size": 1200,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "global without sharing class OrchestratorSampleBatchJob extends OrchestratorBatchParent {\n\n	global override void execute(Database.BatchableContext BC, List<sObject> scope) {\n		log('In execute...');\n		for (SObject s : scope) {\n			Account a = (Account)s;\n			log('Account id: ' + a.id + ' Name: ' + a.name);\n		}\n	}\n\n	// in this method, we must initialize the query and debugprefix, any other needed startup values\n\n	global override void init() {\n		log('In init...');	\n		myName = 'OrchestratorSampleBatchJob';\n		query = 'select id, name from Account';\n		DEBUGPREFIX = ' ** ORCH_BATCHSAMPLE ** ';\n	}\n\n\n}",
			"file": "src/classes/OrchestratorSampleBatchJob.cls",
			"file_size": 598,
			"file_write_time": 131097461140000000,
			"settings":
			{
				"buffer_size": 598,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/* \n * \n * This is the OrchestratorTaskSetup class which reads the config and sets up all \n * jobs that will be executed according to the config\n *\n*/\n\nglobal without sharing class OrchestratorTaskSetup extends OrchestratorQueueableParent {\n\n	private final String JOBNAME = OrchestratorConstants.TASKSETUP_JOBNAME;\n	private final String DEBUGPREFIX = ' ** ORCH_TASKSETUP ** ';\n\n	global OrchestratorTaskSetup() {\n		myName = JOBNAME;\n	}\n\n	global override boolean execute() {\n		// look for the Custom Metadata item\n\n		Orchestrator_Configuration__mdt myConfigMDT = [select QualifiedApiName, Jobs__c from Orchestrator_Configuration__mdt WHERE DeveloperName=:myConfigId][0];\n		log('Found configuration MDT: ' + myConfigMDT);\n\n		// now create a custom setting for this execution\n\n		Orchestrator_Execution_Settings__c newSetting = new Orchestrator_Execution_Settings__c();\n		newSetting.Current_run_Id__c = myJobId;\n		newSetting.Name = myJobId;\n\n		// get the jobs from the custom metadata, move over to custom setting\n\n		newSetting.Job_queue__c = myConfigMDT.Jobs__c;\n\n		insert newSetting;\n\n		return true; // we're done with the task setup so return true\n	}\n}",
			"file": "src/classes/OrchestratorTaskSetup.cls",
			"file_size": 1150,
			"file_write_time": 131097422930000000,
			"settings":
			{
				"buffer_size": 1150,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/* \n * \n * This is the OrchestratorTaskSetup class which reads the config and sets up all \n * jobs that will be executed according to the config\n *\n*/\n\nglobal without sharing class OrchestratorHousekeeping extends OrchestratorQueueableParent {\n\n	private final String JOBNAME = OrchestratorConstants.HOUSEKEEPING_JOBNAME;\n	private final String DEBUGPREFIX = ' ** ORCH_HOUSEKEEPING ** ';\n\n	global OrchestratorHousekeeping() {\n		myName = JOBNAME;\n	}\n\n	global override boolean execute() {\n		// look for the Custom Metadata item\n\n		// rename the custom settings object to save for later\n		mySettings.name = 'HK_' +  mySettings.name + Datetime.now().format();\n		mySettings.Job_queue__c = '';\n		mySettings.Current_job__c = '';\n\n		// update in db\n\n		update mySettings;\n\n		return true; // we're done with the housekeeping so return true\n	}\n}\n",
			"file": "src/classes/OrchestratorHousekeeping.cls",
			"file_size": 833,
			"file_write_time": 131097423190000000,
			"settings":
			{
				"buffer_size": 833,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 67.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/apex-scripts",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/objects",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/reportTypes"
	],
	"file_history":
	[
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/package.xml",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/OrchestratorSchedulable.cls",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/MetadataAuditLogQueueable.cls",
		"/Users/kimgalant/Library/Application Support/Sublime Text 3/Packages/User/mavensmate.sublime-settings",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/I_OrchestratorJob.cls",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/OrchestratorException.cls",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/OrchestratorQueuable.cls",
		"/Users/kimgalant/Box Sync/Territory integration/sfmapping.sdl",
		"/Users/kimgalant/Documents/workspace/MetadataAudit/MetadataAudit/MetadataTypes.csv",
		"/Users/kimgalant/Library/Application Support/Sublime Text 3/Packages/MavensMate/mavensmate.sublime-settings",
		"/Users/kimgalant/Desktop/dev/CopyStorm/createTable.py",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/MetadataAuditJobLogSelector.cls",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/MetadataAuditLogItemsSelector.cls",
		"/Users/kimgalant/Box Sync/Data Migration/2. Quote - SITUAT - small - csv.csv",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/apex-scripts/RunMetadataAudit.cls",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/MetadataAuditLogService.cls",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/MetadataService.cls",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/objects/MetadataAuditSettings__c.object",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/Home dev org.sublime-settings",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/MetadataAuditLogService.cls-meta.xml",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/classes/MetadataServiceExamples.cls",
		"/Users/kimgalant/Documents/workspace/sublime/Home dev org/src/objects/Metadata_Audit_Log_Item__c.object",
		"/Users/kimgalant/Documents/workspace/java-getting-started/src/main/java/Main.java",
		"/Users/kimgalant/.bash_profile",
		"/Users/kimgalant/Desktop/migtool/resources/build.xml",
		"/Users/kimgalant/Documents/dev/migtool/resources/build.xml",
		"/Users/kimgalant/Documents/workspace/OrgCloneTools/resources/build.xml",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/objects/Premium_Code__c.object",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/PremiumCodeTriggerHandler.cls",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/DA_CustomAction_ProcessPCR.cls",
		"/Users/kimgalant/Documents/dev/migtool/log4j2.xml",
		"/Users/kimgalant/Documents/splunk/sample3.xml",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/triggers/PremiumCodeRequestTrigger.trigger",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/pages/fileUpload.page",
		"/Users/kimgalant/Documents/splunk/WinSCP_LogFile_Ext.SFTPSpotify@193.44.159.35_20150928080001.xml",
		"/Users/kimgalant/Documents/splunk/sample5.xml",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/GlobalPermsetCreate.cls",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/pages/OpportunityTrafficController.page",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/DA_SyncOppTeamMembersAndDocumentsBatch.cls",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/triggers/CreditRequestTriggerBeforeUpdateCheckIfWriteProtected.trigger",
		"/Users/kimgalant/Downloads/result.csv",
		"/Users/kimgalant/Documents/to_delete_finance_data_20150825_1723.csv",
		"/Users/kimgalant/Downloads/result.xml",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/DA_ProcessRequestedApprovals.cls",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/DA_Utilities.cls",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/triggers/OpportunityBeforeDelete.trigger",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/OpportunityDeleteHandler_Test.cls",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/OpportunityDeleteHandler.cls",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/DA_TestDataFactory.cls",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/DA_InitiateApproval.cls",
		"/Users/kimgalant/Documents/mm/workspace/Spotify BDDEV/src/classes/DA_TabVisibility_ResourceType.cls"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"/Users/myname/conf/confluence-2.1.3-std",
			",",
			"'",
			",",
			"\\t",
			"listMetadata",
			"lastModifiedByName",
			"Metadata_LM_By__c",
			"oauth2",
			"SessionHeader",
			"SessionHeader_element",
			"sessionid",
			"listMetadata_element",
			"future",
			"debug",
			"\\n",
			"\\.(.*) =.*",
			"\\s=.*",
			"mali.",
			"^\\s*",
			"\\s",
			",",
			"'",
			"change or unset",
			"chatter"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"/Library/Tomcat",
			",true",
			"",
			"\\n,",
			",",
			"",
			",\\n",
			".\\1 = mali.\\1;",
			",",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/classes/OrchestratorQueueable.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4918,
						"regions":
						{
						},
						"selection":
						[
							[
								1584,
								1584
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 69.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "apex-scripts/RunOrchestrator.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 72,
						"regions":
						{
						},
						"selection":
						[
							[
								62,
								62
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/classes/OrchestratorConstants.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 240,
						"regions":
						{
						},
						"selection":
						[
							[
								224,
								224
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/classes/OrchestratorJobParent.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1917,
						"regions":
						{
						},
						"selection":
						[
							[
								1915,
								1844
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 12.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/classes/OrchestratorQueueableParent.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 874,
						"regions":
						{
						},
						"selection":
						[
							[
								871,
								796
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/classes/OrchestratorBatchParent.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1200,
						"regions":
						{
						},
						"selection":
						[
							[
								116,
								133
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/classes/OrchestratorSampleBatchJob.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 598,
						"regions":
						{
						},
						"selection":
						[
							[
								517,
								545
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/classes/OrchestratorTaskSetup.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1150,
						"regions":
						{
						},
						"selection":
						[
							[
								274,
								296
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/classes/OrchestratorHousekeeping.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 833,
						"regions":
						{
						},
						"selection":
						[
							[
								319,
								319
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.MavensMate-OutputPanel":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Home dev org.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"_pcr",
				"src/classes/DA_CustomAction_ProcessPCR.cls"
			],
			[
				"prereqtr",
				"src/triggers/PremiumCodeRequestTrigger.trigger"
			],
			[
				"oppotraff",
				"src/pages/OpportunityTrafficController.page"
			],
			[
				"fileup",
				"src/pages/fileUpload.page"
			],
			[
				"sync",
				"src/classes/DA_SyncOppTeamMembersAndDocumentsBatch.cls"
			],
			[
				"creditcheck",
				"src/triggers/CreditRequestTriggerBeforeUpdateCheckIfWriteProtected.trigger"
			],
			[
				"processpcr",
				"src/classes/DA_CustomAction_ProcessPCR.cls"
			],
			[
				"da_util",
				"src/classes/DA_Utilities.cls"
			],
			[
				"proce",
				"src/classes/DA_ProcessRequestedApprovals.cls"
			],
			[
				"inita",
				"src/classes/DA_InitiateApproval.cls"
			],
			[
				"testda",
				"src/classes/DA_TestDataFactory.cls"
			],
			[
				"tabvi",
				"src/classes/DA_TabVisibility_ResourceType.cls"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 266.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
